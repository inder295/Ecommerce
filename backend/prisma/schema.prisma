// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client { 
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER
}

// enum Status {
//   Pending
//   OutForDelivery
//   Delivered
// }

enum OrderStatus {
  PENDING
  OUT_FOR_DELIVERY
  COMPLETE
  CANCELLED
}

enum PaymentMethod {
  COD
  SRIPE
}

enum PaymentStatus {
  SUCCESS
  FAIL
}

enum ShipmentMethod {
  FREE 
  PAID
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  role Role @default(USER)
//  products   Product[]
  orders     Order[] 
  reviews    Review[]
  cartItems  CartItems[]
  wishList   Wishlist[]
  address    Address[]
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  inventory   Int
  image    String[] 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  brand       String     @default("Unknown")
  rating      Float      @default(0)
  ratingCount Int        @default(0)
  attributes  Json? 
  
  categories  Category[] @relation("Products")
  reviews     Review[]
  cartItems  CartItems[]
  wishList Wishlist[]
  orderItems OrderItem[]

}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  products    Product[]  @relation("Products")
}

model Review {
  id          String   @id @default(uuid())
  userId      String
  productId   String
  rating      Int
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

model CartItems{
 id String @id @default(uuid())
 userId String 
 productId String 
 quantity Int? 
 price Float
 totalPrice Float
 createAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 user User @relation(fields: [userId],references: [id])
 product Product @relation(fields: [productId],references: [id])
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  addressId   String
  grandTotal  Float
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(FAIL)
  shipmentMehod ShipmentMethod
  orderStatus OrderStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  address     Address  @relation(fields: [addressId], references: [id])
  orderItem OrderItem[]
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  productId String
  name String
  image String?
  quantity Int
  price Int
  totalPrice Int 
  order     Order     @relation(fields: [orderId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])
}
  



model Wishlist {
  id String @id @default(uuid())
  UserId String
  productId String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [UserId],references: [id])
  product Product @relation(fields: [productId],references: [id])

}

model Address{
  id String @id @default(uuid())
  userId String
  fullname String
  phone String
  address String
  city String
  state String
  country String
  zip String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id])
  order Order[]
  
 
}

// model Shipment{
//   id String @id @default(uuid())
//   method Method
//   Delivered Boolean @default(false)
//   orderId String 
//   userId String
//   addressId String
//   status Status @default(Pending)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId],references: [id])
//   address Address @relation(fields: [addressId],references: [id])
//   order Order @relation(fields: [orderId],references: [id])



  
// }



