// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client { 
  provider = "prisma-client-js" 
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  address    String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  role Role @default(USER)
  orders     Order[]
  reviews    Review[]
  cartItems CartItems[]
  wishList Wishlist[]
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  inventory   Int
  image    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  categories  Category[] @relation("Products")
  reviews     Review[]
  cartItems  CartItems[]
  wishList Wishlist[]

}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  products    Product[]  @relation("Products")
}

model Review {
  id          String   @id @default(uuid())
  userId      String
  productId   String
  rating      Int
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

model CartItems{
 id String @id @default(uuid())
 userId String 
 productId String 
 quantity Int 
 price Float
 totalPrice Float
 createAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 user User @relation(fields: [userId],references: [id])
 product Product @relation(fields: [productId],references: [id])
}

model Order {
  id          String   @id @default(uuid())
  userId      String
  productName String
  quantity    Int
  price       Float
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
}

model Wishlist {
  id String @id @default(uuid())
  UserId String
  productId String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [UserId],references: [id])
  product Product @relation(fields: [productId],references: [id])

}

